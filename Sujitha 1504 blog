mkdir blog-website
cd blog-website
npm init -y
npm install express body-parser mongoose ejs
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/styles.css">
</head>
<body>
    <header>
        <h1><a href="/">My Blog</a></h1>
        <nav>
            <a href="/">Home</a>
            <a href="/compose">Compose</a>
        </nav>
    </header>
    <main>
        <%= content %>
    </main>
</body>
</html><% posts.forEach(post => { %>
    <article>
        <h2><a href="/posts/<%= post._id %>"><%= post.title %></a></h2>
        <p><%= post.content.substring(0, 100) %>...</p>
    </article>
<% }) %>
<h2>Compose a New Post</h2>
<form action="/compose" method="POST">
    <label for="title">Title:</label>
    <input type="text" id="title" name="title" required>
    
    <label for="content">Content:</label>
    <textarea id="content" name="content" required></textarea>
    
    <button type="submit">Post</button>
</form>
body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    padding: 0;
}

header {
    background: #333;
    color: white;
    padding: 1em 0;
    text-align: center;
}

header nav a {
    color: white;
    margin: 0 10px;
    text-decoration: none;
}

main {
    padding: 20px;
}

article {
    background: white;
    margin: 20px 0;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

form {
    display: flex;
    flex-direction: column;
}

label {
    margin: 10px 0 5px;
}

input, textarea {
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 3px;
    margin-bottom: 10px;
}

button {
    padding: 10px;
    border: none;
    background-color: #5cb85c;
    color: white;
    border-radius: 3px;
    cursor: pointer;
}

button:hover {
    background-color: #4cae4c;
}const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const ejs = require('ejs');
const path = require('path');

const app = express();
const port = 3000;

// Middleware
app.set('view engine', 'ejs');
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'public')));

// MongoDB Connection
mongoose.connect('mongodb://localhost:27017/blogDB', { useNewUrlParser: true, useUnifiedTopology: true });

// Mongoose Schema and Model
const postSchema = new mongoose.Schema({
    title: String,
    content: String
});

const Post = mongoose.model('Post', postSchema);

// Routes
app.get('/', (req, res) => {
    Post.find({}, (err, posts) => {
        res.render('layout', { title: 'Home', content: ejs.renderFile(path.join(__dirname, 'views/home.ejs'), { posts }) });
    });
});

app.get('/compose', (req, res) => {
    res.render('layout', { title: 'Compose', content: ejs.renderFile(path.join(__dirname, 'views/compose.ejs')) });
});

app.post('/compose', (req, res) => {
    const newPost = new Post({
        title: req.body.title,
        content: req.body.content
    });

    newPost.save((err) => {
        if (err) {
            res.send('There was an error saving the post.');
        } else {
            res.redirect('/');
        }
    });
});

app.get('/posts/:postId', (req, res) => {
    const postId = req.params.postId;

    Post.findById(postId, (err, post) => {
        if (err) {
            res.send('Post not found.');
        } else {
            res.render('layout', { title: post.title, content: ejs.renderFile(path.join(__dirname, 'views/post.ejs'), { post }) });
        }
    });
});

// Start Server
app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});blog-website/
│
├── node_modules/
│
├── public/
│   ├── styles.css
│
├── views/
│   ├── layout.ejs
│   ├── home.ejs
│   ├── compose.ejs
│   └── post.ejs
│
├── server.js
│
└── package.jsonnode server.js
